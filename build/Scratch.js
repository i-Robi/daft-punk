/**
 * @file Scratch
 * @author SÃ©bastien Robaszkiewicz [sebastien@robaszkiewicz.com]
 * @description Converts the action of scratching the screen or moving the
 * mouse into an energy value between 0 and 1.
 */

'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var EventEmitter = require('events').EventEmitter;

function speed(startPosition, endPosition) {
  var dX = endPosition[0] - startPosition[0];
  var dY = endPosition[1] - startPosition[1];
  var dT = endPosition[2] - startPosition[2];
  var timestamp = endPosition[2];

  if (dT !== 0) return [Math.sqrt(dX * dX + dY * dY) / dT, timestamp];

  return [0, timestamp];
}

function acc(startSpeed, endSpeed) {
  var dS = endSpeed[0] - startSpeed[0];
  var dT = endSpeed[1] - startSpeed[1];
  var timestamp = endSpeed[1];

  if (dT !== 0) return [dS / dT, timestamp];

  return [0, timestamp];
}

function getTime() {
  return window.performance && window.performance.now ? window.performance.now() / 1000 : new Date().getTime() / 1000;
}

/**
 * @class LowPassFilter
 * @description Applies a low-pass filter.
 */

var LowPassFilter = (function () {
  function LowPassFilter(timeConstant) {
    _classCallCheck(this, LowPassFilter);

    this._XFiltered;
    this._previousTimestamp;
    this._timeConstant = timeConstant;
  }

  _createClass(LowPassFilter, [{
    key: '_decay',
    value: function _decay(dt) {
      return Math.exp(-2 * Math.PI * dt / this._timeConstant);
    }
  }, {
    key: 'input',
    value: function input(x) {
      var now = getTime();

      if (this._previousTimestamp) {
        var dt = now - this._previousTimestamp;
        var k = this._decay(dt);

        this._XFiltered = k * this._XFiltered + (1 - k) * x;
        this._previousTimestamp = now;

        return this._XFiltered;
      } else {
        this._previousTimestamp = now;
        this._XFiltered = x;
        return;
      }
    }
  }]);

  return LowPassFilter;
})();

var Scratch = (function (_EventEmitter) {
  _inherits(Scratch, _EventEmitter);

  function Scratch() {
    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, Scratch);

    _get(Object.getPrototypeOf(Scratch.prototype), 'constructor', this).call(this);

    this.event = null;

    this._bufferLength = options.bufferLength || 5;
    this._filter = new LowPassFilter(0.05);
    this._surface = options.surface || document;
    this._timeout = null;

    this._x = null;
    this._y = null;
    this._s = null;
    this._lastS = null;
    this._acc = null;

    this._surface.addEventListener('mousemove', this.onMotion.bind(this));
    this._surface.addEventListener('touchmove', this.onMotion.bind(this));
  }

  _createClass(Scratch, [{
    key: 'onMotion',
    value: function onMotion(e) {
      // /!\ BUG
      // As of Safari 9.0 (11601.1.56) for Mac OS X 10.11 (15A284), Safari
      // triggers each mousemove event twice unless the mouse button is down while
      // dragging).
      var timestamp = e.timeStamp / 1000;
      var x = undefined;
      var y = undefined;

      switch (e.type) {
        case 'mousemove':
          x = e.clientX;
          y = e.clientY;
          break;
        case 'touchmove':
          x = e.changedTouches[0].clientX;
          y = e.changedTouches[0].clientY;
          break;
      }

      var pos = [x, y, timestamp];

      if (this._pos) {
        this._lastS = this._s; // remains null the first time onMotion is called
        this._s = speed(this._pos, pos);
      }

      if (this._lastS) this._acc = acc(this._lastS, this._s);

      this._pos = pos;

      if (this._acc) {
        var accValue = Math.min(Math.abs(this._acc[0] / 100000), 1);
        this.event = this._filter.input(accValue);
      }

      this.emit('scratch', this.event);

      clearTimeout(this._timeout);
      this._timeout = this.timeoutFun();
    }
  }, {
    key: 'timeoutFun',
    value: function timeoutFun() {
      var _this = this;

      return setTimeout(function () {
        _this.event = _this._filter.input(0);
        _this.emit('scratch', _this.event);
        _this._timeout = _this.timeoutFun();
      }, 50);
    }
  }]);

  return Scratch;
})(EventEmitter);

module.exports = Scratch;
//# sourceMappingURL=data:application/json;base64,