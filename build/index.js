/**
 * @file Interactive version of Daft Punk's Lose Yourself To Dance.
 * @author SÃ©bastien Robaszkiewicz [hello@robi.me]
 */

'use strict';

// Libraries and files

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _Promise = require('babel-runtime/core-js/promise')['default'];

var audioContext = require('waves-audio').audioContext;
var DotNav = require('./DotNav');
var GuitarEngine = require('./GuitarEngine');
var input = require('motion-input');
var SuperLoader = require('waves-loaders').SuperLoader;
var PlayControl = require('waves-audio').PlayControl;
var PlayerEngine = require('waves-audio').PlayerEngine;
var Transport = require('waves-audio').Transport;

// Helper functions
function startWebAudio() {
  var o = audioContext.createOscillator();
  var g = audioContext.createGain();
  var now = audioContext.currentTime;
  o.connect(g);
  g.connect(audioContext.destination);
  o.start(now);
  o.stop(now + 0.000001);
}

// Helper variables
var webAudioStarted = false;
var playing = false;

// Constants (song specific)
var mode = 0;
var offset = 2.400;
var period = 0.150;

// Script
(function () {
  var loader = new SuperLoader();

  // Prevent scrolling
  document.body.addEventListener('touchmove', function (e) {
    e.preventDefault();
  });

  _Promise.all([loader.load(['assets/backtrack.mp3', 'assets/guitar.mp3', 'assets/guitar-markers.json']), input.init('energy')]).then(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2);

    var loadedFiles = _ref2[0];
    var inputModules = _ref2[1];

    // Files and energy module
    var backtrackBuffer = loadedFiles[0];
    var guitarBuffer = loadedFiles[1];
    var guitarMarkers = loadedFiles[2];
    var energy = inputModules[0];

    // Player engine (backtrack)
    var backtrackPlayer = new PlayerEngine({
      buffer: backtrackBuffer,
      gain: 0.5
    });
    backtrackPlayer.connect(audioContext.destination);

    // Instrument engine (guitar)
    var guitarEngine = new GuitarEngine({
      audioBuffer: guitarBuffer,
      mode: mode,
      offset: offset,
      period: period,
      segmentMarkers: guitarMarkers
    });
    guitarEngine.connect(audioContext.destination);

    // Transport
    var transport = new Transport();
    transport.add(backtrackPlayer, 0, Infinity);
    transport.add(guitarEngine, 0, Infinity);

    // Play control
    var playControl = new PlayControl(transport);

    // Dot navigation
    var nav = document.querySelector('.dot-nav');
    var dotNav = new DotNav({
      callback: guitarEngine.changeMode.bind(guitarEngine),
      nav: nav,
      selected: mode
    });

    // Button
    var button = document.getElementById('button');
    button.addEventListener('click', function () {
      if (!webAudioStarted) {
        startWebAudio();
        webAudioStarted = true;
      }

      if (!playing) {
        playControl.start();
        guitarEngine.start();
        playing = true;
      } else {
        playControl.stop();
        guitarEngine.stop(); // TODO: remove if empty
        playing = false;
      }

      button.querySelector('i').classList.toggle('icon-play');
      button.querySelector('i').classList.toggle('icon-stop');
    });

    // Input module listener
    if (energy.isValid) {
      input.addListener('energy', function (val) {
        guitarEngine.onEnergy(val);
      });
    }
  });
})();
//# sourceMappingURL=data:application/json;base64,